// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	var resolve, getRequire, require, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]};
	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullpath, state) {
		var name, dir, exports, module, fn, found, i, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
			} else {
				tree.push(scope);
				scope = scope[dir];
			}
			if (!scope) throw notFoundError(fullpath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullpath, 1);
			}
			return resolve(scope, tree, 'index', fullpath, 2);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullpath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports };
		fn.call(exports, exports, module, getRequire(scope, tree));
		return module.exports;
	};
	require = function (scope, tree, fullpath) {
		var name, path = fullpath, t = fullpath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) throw notFoundError(fullpath);
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullpath, state);
	};
	getRequire = function (scope, tree) {
		return function (path) { return require(scope, [].concat(tree), path); };
	};
	return getRequire(modules, []);
})({
	"/": {
		"Users": {
			"danielearwicker": {
				"Desktop": {
					"Fema": {
						"grid": {
							"main.js": function (exports, module, require) {
								
								window.onload = function() {

								    var columns = [
								        { label: 'ID', template: '<span data-bind="text: id"></span>', width: 70 },
								        { label: 'First name', template: '<span data-bind="text: firstName"></span>', width: 120 },
								        { label: 'Middle name', template: '<span data-bind="text: middleName"></span>', width: 120 },
								        { label: 'Last name', template: '<span data-bind="text: lastName"></span>', width: 160 },
								        { label: 'Full name', template: '<span data-bind="text: firstName + \' \' + middleName + \' \' + lastName"></span>', width: 220 }
								    ];

								    var firstNames = ['Homer', 'Marge', 'Bart', 'Lisa', 'Maggie', 'Moe', 'Barney', 'Carl', 'Lenny', 'Ned', 'Milhouse'];
								    var lastNames = ['Simpson', 'Jetson', 'Flintstone', 'Obama', 'Bush', 'Clinton', 'Smithers'];

								    var makeRow = function(i) {
								        return {
								            id: i,
								            firstName: firstNames[i % firstNames.length],
								            middleName: firstNames[(i + 4) % firstNames.length],
								            lastName: lastNames[i % lastNames.length]
								        };
								    };

								    var rows = [];
								    for (var r = 0; r<100; r++) {
								        rows.push(makeRow(r));
								    }

								    var viewModel = {
								        columns: columns,

								        rowCount: ko.observable(10000000),

								        rowHeight: ko.observable(24),
								        visibleRowsHeight: ko.observable(0),

								        scrollLeft: ko.observable(0),
								        scrollTop: ko.observable(0)
								    };

								    viewModel.visibleRows = ko.computed(function() {
								        return Math.ceil(viewModel.visibleRowsHeight() / viewModel.rowHeight());
								    });

								    var range = ko.computed(function() {
								        return viewModel.rowCount() - viewModel.visibleRows();
								    });

								    viewModel.spaceHeight = ko.computed(function() {
								        return (viewModel.visibleRowsHeight() + range() + 1) + 'px';
								    });

								    viewModel.rowOffset = ko.computed(function() {
								        return viewModel.scrollTop();
								    });

								    viewModel.getRowTop = function(index) {
								        return (index * viewModel.rowHeight()) + viewModel.scrollTop();
								    };

								    viewModel.rows = ko.computed(function() {

								        var rows = [];
								        var last = Math.min(viewModel.rowCount() - 1, viewModel.rowOffset() + viewModel.visibleRows());
								        for (var r = viewModel.rowOffset(); r <= last; r++) {
								            rows.push(makeRow(r));
								        }

								        return rows;

								    }).extend({ throttle: 10 });

								    ko.applyBindings(viewModel);
								};
							}
						}
					}
				}
			}
		}
	}
})("/Users/danielearwicker/Desktop/Fema/grid/main");
